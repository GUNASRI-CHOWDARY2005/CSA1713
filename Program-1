import heapq

# Define the goal state
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]

# Directions: up, down, left, right
moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]

# Convert 2D list to a tuple of tuples (for hashing)
def state_to_tuple(state):
    return tuple(tuple(row) for row in state)

# Manhattan distance heuristic
def manhattan(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                goal_x, goal_y = divmod(val - 1, 3)
                distance += abs(goal_x - i) + abs(goal_y - j)
    return distance

# Find the position of the blank (0)
def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

# Generate all possible next states
def get_neighbors(state):
    neighbors = []
    x, y = find_blank(state)
    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

# A* Search Algorithm
def a_star(start_state):
    visited = set()
    pq = []
    heapq.heappush(pq, (manhattan(start_state), 0, start_state, []))

    while pq:
        est_cost, cost, current, path = heapq.heappop(pq)

        if current == goal_state:
            return path + [current]

        state_id = state_to_tuple(current)
        if state_id in visited:
            continue
        visited.add(state_id)

        for neighbor in get_neighbors(current):
            if state_to_tuple(neighbor) not in visited:
                heapq.heappush(pq, (
                    cost + 1 + manhattan(neighbor),
                    cost + 1,
                    neighbor,
                    path + [current]
                ))
    return None

# Utility function to print the puzzle state
def print_state(state):
    for row in state:
        print(' '.join(str(val) if val != 0 else ' ' for val in row))
    print()

# Example usage
start_state = [[1, 2, 3],
               [4, 0, 6],
               [7, 5, 8]]

solution = a_star(start_state)

if solution:
    print("Solution found in", len(solution) - 1, "moves:")
    for step in solution:
        print_state(step)
else:
    print("No solution found.")
