N = 8

def print_solution(board):
    for row in board:
        print(" ".join("Q" if col else "." for col in row))
    print()

def is_safe(board, row, col):
    # Check left of the current row
    for i in range(col):
        if board[row][i]:
            return False

    # Check upper-left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j]:
            return False

    # Check lower-left diagonal
    for i, j in zip(range(row, N), range(col, -1, -1)):
        if board[i][j]:
            return False

    return True

def solve_n_queens(board, col):
    if col >= N:
        print_solution(board)
        return True  # Return True to stop after one solution

    res = False
    for i in range(N):
        if is_safe(board, i, col):
            board[i][col] = 1
            res = solve_n_queens(board, col + 1) or res
            board[i][col] = 0  # backtrack

    return res

# Main execution
board = [[0 for _ in range(N)] for _ in range(N)]

if not solve_n_queens(board, 0):
    print("No solution exists.")
