from collections import Counter

# Simple dataset
dataset = [
    [2.7, 2.5, 0],
    [1.3, 1.5, 0],
    [3.0, 3.7, 0],
    [7.6, 2.7, 1],
    [5.3, 2.0, 1],
    [6.9, 1.7, 1]
]

# Split dataset based on a feature and threshold
def split_dataset(index, threshold, dataset):
    left = [row for row in dataset if row[index] < threshold]
    right = [row for row in dataset if row[index] >= threshold]
    return left, right

# Gini index for a split
def gini_index(left, right):
    def gini(group):
        total = len(group)
        if total == 0:
            return 0
        counts = Counter(row[-1] for row in group)
        return 1 - sum((count/total)**2 for count in counts.values())
    total = len(left) + len(right)
    return (len(left)/total)*gini(left) + (len(right)/total)*gini(right)

# Find the best split
def find_best_split(dataset):
    best_index, best_value, best_score = None, None, float('inf')
    for index in range(len(dataset[0]) - 1):
        for row in dataset:
            left, right = split_dataset(index, row[index], dataset)
            score = gini_index(left, right)
            if score < best_score:
                best_index, best_value, best_score = index, row[index], score
    return best_index, best_value

# Build the one-level tree
def build_simple_tree(dataset):
    index, value = find_best_split(dataset)
    left, right = split_dataset(index, value, dataset)
    left_label = Counter(row[-1] for row in left).most_common(1)[0][0]
    right_label = Counter(row[-1] for row in right).most_common(1)[0][0]
    return {'index': index, 'value': value, 'left': left_label, 'right': right_label}

# Predict using the tree
def predict(tree, row):
    if row[tree['index']] < tree['value']:
        return tree['left']
    else:
        return tree['right']

# Example usage
tree = build_simple_tree(dataset)
for row in dataset:
    prediction = predict(tree, row)
    print(f"Expected: {row[-1]}, Predicted: {prediction}")
